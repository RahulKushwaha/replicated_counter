// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CounterEntry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CounterEntry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CounterEntry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CounterEntry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CounterEntry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CounterEntry_2eproto;
namespace rk {
namespace projects {
namespace counter_app {
class CounterLogEntry;
struct CounterLogEntryDefaultTypeInternal;
extern CounterLogEntryDefaultTypeInternal _CounterLogEntry_default_instance_;
}  // namespace counter_app
}  // namespace projects
}  // namespace rk
PROTOBUF_NAMESPACE_OPEN
template<> ::rk::projects::counter_app::CounterLogEntry* Arena::CreateMaybeMessage<::rk::projects::counter_app::CounterLogEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rk {
namespace projects {
namespace counter_app {

enum CounterLogEntry_CommandType : int {
  CounterLogEntry_CommandType_INCR = 0,
  CounterLogEntry_CommandType_DECR = 1,
  CounterLogEntry_CommandType_CounterLogEntry_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CounterLogEntry_CommandType_CounterLogEntry_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CounterLogEntry_CommandType_IsValid(int value);
constexpr CounterLogEntry_CommandType CounterLogEntry_CommandType_CommandType_MIN = CounterLogEntry_CommandType_INCR;
constexpr CounterLogEntry_CommandType CounterLogEntry_CommandType_CommandType_MAX = CounterLogEntry_CommandType_DECR;
constexpr int CounterLogEntry_CommandType_CommandType_ARRAYSIZE = CounterLogEntry_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CounterLogEntry_CommandType_descriptor();
template<typename T>
inline const std::string& CounterLogEntry_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CounterLogEntry_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CounterLogEntry_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CounterLogEntry_CommandType_descriptor(), enum_t_value);
}
inline bool CounterLogEntry_CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CounterLogEntry_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CounterLogEntry_CommandType>(
    CounterLogEntry_CommandType_descriptor(), name, value);
}
// ===================================================================

class CounterLogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rk.projects.counter_app.CounterLogEntry) */ {
 public:
  inline CounterLogEntry() : CounterLogEntry(nullptr) {}
  ~CounterLogEntry() override;
  explicit PROTOBUF_CONSTEXPR CounterLogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CounterLogEntry(const CounterLogEntry& from);
  CounterLogEntry(CounterLogEntry&& from) noexcept
    : CounterLogEntry() {
    *this = ::std::move(from);
  }

  inline CounterLogEntry& operator=(const CounterLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CounterLogEntry& operator=(CounterLogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CounterLogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CounterLogEntry* internal_default_instance() {
    return reinterpret_cast<const CounterLogEntry*>(
               &_CounterLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CounterLogEntry& a, CounterLogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CounterLogEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CounterLogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CounterLogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CounterLogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CounterLogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CounterLogEntry& from) {
    CounterLogEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CounterLogEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rk.projects.counter_app.CounterLogEntry";
  }
  protected:
  explicit CounterLogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CounterLogEntry_CommandType CommandType;
  static constexpr CommandType INCR =
    CounterLogEntry_CommandType_INCR;
  static constexpr CommandType DECR =
    CounterLogEntry_CommandType_DECR;
  static inline bool CommandType_IsValid(int value) {
    return CounterLogEntry_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    CounterLogEntry_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    CounterLogEntry_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    CounterLogEntry_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return CounterLogEntry_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return CounterLogEntry_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandType* value) {
    return CounterLogEntry_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kValFieldNumber = 1,
    kCommandTypeFieldNumber = 2,
  };
  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 val = 1;
  void clear_val();
  int64_t val() const;
  void set_val(int64_t value);
  private:
  int64_t _internal_val() const;
  void _internal_set_val(int64_t value);
  public:

  // .rk.projects.counter_app.CounterLogEntry.CommandType commandType = 2;
  void clear_commandtype();
  ::rk::projects::counter_app::CounterLogEntry_CommandType commandtype() const;
  void set_commandtype(::rk::projects::counter_app::CounterLogEntry_CommandType value);
  private:
  ::rk::projects::counter_app::CounterLogEntry_CommandType _internal_commandtype() const;
  void _internal_set_commandtype(::rk::projects::counter_app::CounterLogEntry_CommandType value);
  public:

  // @@protoc_insertion_point(class_scope:rk.projects.counter_app.CounterLogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    int64_t val_;
    int commandtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CounterEntry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CounterLogEntry

// int64 val = 1;
inline void CounterLogEntry::clear_val() {
  _impl_.val_ = int64_t{0};
}
inline int64_t CounterLogEntry::_internal_val() const {
  return _impl_.val_;
}
inline int64_t CounterLogEntry::val() const {
  // @@protoc_insertion_point(field_get:rk.projects.counter_app.CounterLogEntry.val)
  return _internal_val();
}
inline void CounterLogEntry::_internal_set_val(int64_t value) {
  
  _impl_.val_ = value;
}
inline void CounterLogEntry::set_val(int64_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:rk.projects.counter_app.CounterLogEntry.val)
}

// .rk.projects.counter_app.CounterLogEntry.CommandType commandType = 2;
inline void CounterLogEntry::clear_commandtype() {
  _impl_.commandtype_ = 0;
}
inline ::rk::projects::counter_app::CounterLogEntry_CommandType CounterLogEntry::_internal_commandtype() const {
  return static_cast< ::rk::projects::counter_app::CounterLogEntry_CommandType >(_impl_.commandtype_);
}
inline ::rk::projects::counter_app::CounterLogEntry_CommandType CounterLogEntry::commandtype() const {
  // @@protoc_insertion_point(field_get:rk.projects.counter_app.CounterLogEntry.commandType)
  return _internal_commandtype();
}
inline void CounterLogEntry::_internal_set_commandtype(::rk::projects::counter_app::CounterLogEntry_CommandType value) {
  
  _impl_.commandtype_ = value;
}
inline void CounterLogEntry::set_commandtype(::rk::projects::counter_app::CounterLogEntry_CommandType value) {
  _internal_set_commandtype(value);
  // @@protoc_insertion_point(field_set:rk.projects.counter_app.CounterLogEntry.commandType)
}

// string description = 3;
inline void CounterLogEntry::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& CounterLogEntry::description() const {
  // @@protoc_insertion_point(field_get:rk.projects.counter_app.CounterLogEntry.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CounterLogEntry::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rk.projects.counter_app.CounterLogEntry.description)
}
inline std::string* CounterLogEntry::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:rk.projects.counter_app.CounterLogEntry.description)
  return _s;
}
inline const std::string& CounterLogEntry::_internal_description() const {
  return _impl_.description_.Get();
}
inline void CounterLogEntry::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* CounterLogEntry::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* CounterLogEntry::release_description() {
  // @@protoc_insertion_point(field_release:rk.projects.counter_app.CounterLogEntry.description)
  return _impl_.description_.Release();
}
inline void CounterLogEntry::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rk.projects.counter_app.CounterLogEntry.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace counter_app
}  // namespace projects
}  // namespace rk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rk::projects::counter_app::CounterLogEntry_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rk::projects::counter_app::CounterLogEntry_CommandType>() {
  return ::rk::projects::counter_app::CounterLogEntry_CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CounterEntry_2eproto
