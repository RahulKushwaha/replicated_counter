syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "applications/mydb/proto/condition.proto";

package rk.projects.mydb.client;

message DatabaseName{
  string name = 1;
}

message Database{
  DatabaseName name = 1;
}

message TableName {
  string name = 1;
}

message Table{
  TableName name = 1;
  DatabaseName db = 2;
  repeated Column columns = 3;
  PrimaryKey primary_key = 4;
  repeated SecondaryIndex secondary_index = 5;
}

message ColumnName{
  string name = 1;
}

message ColumnValue{
  ColumnName name = 1;
  optional google.protobuf.Any value = 2;
}

message PrimaryKey{
  repeated ColumnName columns = 2;
}

message SecondaryIndex{
  string name = 1;
  repeated ColumnName columns = 2;
}

message Column{
  enum COLUMN_TYPE{
    INT64 = 0;
    STRING = 1;
  }

  ColumnName name = 1;
  COLUMN_TYPE column_type = 2;
}

message TableRows{
  repeated Column columns = 1;
  repeated Row rows = 2;
}

message Row{
  repeated google.protobuf.Any column_values = 1;
}

service db{
  // DB & Table creation operations
  rpc addDatabase(AddDatabaseRequest) returns (google.protobuf.Empty);

  rpc addTable(AddTableRequest) returns (google.protobuf.Empty);

  // Single Table Mutation Operations
  rpc addRow(AddRowRequest) returns (AddRowResponse);

  rpc updateRow(UpdateRowRequest) returns (UpdateRowResponse);

  rpc getRows(GetRowRequest) returns (GetRowResponse);

  // Multi-Table operations
  rpc multiTableOperation(MultiTableOperationRequest) returns (MultiTableOperationResponse);

  // Scan operations
  rpc scanTable(ScanTableRequest) returns (ScanTableResponse);

  // Transaction
  rpc prepareTransaction(PrepareTransactionRequest) returns (PrepareTransactionResponse);

  rpc commitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse);

  rpc abortTransaction(AbortTransactionRequest) returns (AbortTransactionResponse);
}

message AddDatabaseRequest{
  Database database = 1;
}

message AddTableRequest{
  Table table = 1;
}

message AddRowRequest{
  DatabaseName database_name = 1;
  TableName table_name = 2;

  repeated ColumnValue column_values = 3;
  repeated ColumnName return_columns = 4;
}

message AddRowResponse{
  TableRows table_rows = 1;
}

message UpdateRowRequest{
  enum UPDATE_TYPE{
    REPLACE = 0;
    MERGE = 1;
  }

  DatabaseName database_name = 1;
  TableName table_name = 2;

  repeated ColumnValue column_values = 3;
  repeated ColumnName return_columns = 4;

  UPDATE_TYPE update_type = 5;
  Condition condition = 6;
}

message UpdateRowResponse{
  TableRows table_rows = 1;
}

message PrimaryKeyValues{
  repeated ColumnValue column_values = 1;
}

message GetRowRequest{
  DatabaseName database_name = 1;
  TableName table_name = 2;

  repeated PrimaryKeyValues primary_key_values = 3;
  repeated ColumnName return_columns = 4;
}

message GetRowResponse{
  TableRows table_rows = 1;
}

message SingleTableOperationRequest{
  oneof table_operation_request{
    AddRowRequest  add_row_request = 1;
    UpdateRowRequest update_row_request = 2;
    GetRowRequest get_row_request = 3;
  }
}

message SingleTableOperationResponse{
  oneof table_operation_response{
    AddRowResponse add_row_response = 1;
    UpdateRowResponse update_row_response = 2;
    GetRowResponse get_row_response = 3;
  }
}

message MultiTableOperationRequest{
  repeated SingleTableOperationRequest single_table_operation_request = 1;
}

message MultiTableOperationResponse{
  repeated SingleTableOperationResponse single_table_operation_response = 2;
}

message ScanTableRequest{
  DatabaseName database_name = 1;
  TableName table_name = 2;

  repeated ColumnName return_columns = 4;

  optional Condition condition = 5;
}

message ScanTableResponse{
  TableRows table_rows = 1;
}

message PrepareTransactionRequest{
  string txn_id = 1;
  MultiTableOperationRequest request = 2;
}

message PrepareTransactionResponse{
  enum PREPARE_TRANSACTION_STATUS{
    OK = 0;
    ABORT = 1;
  }

  PREPARE_TRANSACTION_STATUS status = 1;
  MultiTableOperationResponse response = 2;
}

message CommitTransactionRequest{
  string txn_id = 1;
}

message CommitTransactionResponse{
  enum COMMIT_TRANSACTION_STATUS{
    SUCCESS = 0;
    FAILED = 1;
  }

  COMMIT_TRANSACTION_STATUS status = 1;
}

message AbortTransactionRequest{
  string txn_id = 1;
}

message AbortTransactionResponse{}