syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "applications/mydb/proto/condition.proto";

package rk.projects.mydb.client;

message DatabaseName{
  string name = 1;
}

message Database{
  DatabaseName name = 1;
}

message TableName {
  string name = 1;
}

message Table{
  TableName name = 1;
  DatabaseName db = 2;
  repeated Column columns = 3;
  PrimaryKey primary_key = 4;
  repeated SecondaryIndex secondary_index = 5;
}

message ColumnName{
  string name = 1;
}

message ColumnValue{
  ColumnName name = 1;
  optional google.protobuf.Any value = 2;
}

message PrimaryKey{
  repeated ColumnName columns = 2;
}

message SecondaryIndex{
  string name = 1;
  repeated ColumnName columns = 2;
}

message Column{
  enum COLUMN_TYPE{
    INT64 = 0;
    STRING = 1;
  }

  ColumnName name = 1;
  COLUMN_TYPE column_type = 2;
}

message TableRows{
  repeated Column columns = 1;
  repeated Row rows = 2;
}

message Row{
  repeated google.protobuf.Any column_values = 1;
}

service db{
  rpc addDatabase(AddDatabaseRequest) returns (google.protobuf.Empty);

  rpc addTable(AddTableRequest) returns (google.protobuf.Empty);

  rpc addRow(AddRowRequest) returns (AddRowResponse);

  rpc updateRow(UpdateRowRequest) returns (UpdateRowResponse);

  rpc scanTable(ScanTableRequest) returns(ScanTableResponse);
}

message AddDatabaseRequest{
  Database database = 1;
}

message AddTableRequest{
  Table table = 1;
}

message AddRowRequest{
  DatabaseName database_name = 1;
  TableName table_name = 2;

  repeated ColumnValue column_values = 3;
  repeated ColumnName return_columns = 4;
}

message AddRowResponse{
  TableRows table_rows = 1;
}

message UpdateRowRequest{
  enum UPDATE_TYPE{
    REPLACE = 0;
    MERGE = 1;
  }

  DatabaseName database_name = 1;
  TableName table_name = 2;

  repeated ColumnValue column_values = 3;
  repeated ColumnName return_columns = 4;

  UPDATE_TYPE update_type = 5;
  Condition condition = 6;
}

message UpdateRowResponse{
  TableRows table_rows = 1;
}

message ScanTableRequest{
  DatabaseName database_name = 1;
  TableName table_name = 2;

  repeated ColumnName return_columns = 4;

  optional Condition condition = 5;
}

message ScanTableResponse{
  TableRows table_rows = 1;
}