// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CounterEntry.proto

#include "CounterEntry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rk {
namespace project {
namespace counter {
PROTOBUF_CONSTEXPR CounterLogEntry::CounterLogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.val_)*/int64_t{0}
  , /*decltype(_impl_.commandtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CounterLogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CounterLogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CounterLogEntryDefaultTypeInternal() {}
  union {
    CounterLogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CounterLogEntryDefaultTypeInternal _CounterLogEntry_default_instance_;
}  // namespace counter
}  // namespace project
}  // namespace rk
static ::_pb::Metadata file_level_metadata_CounterEntry_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_CounterEntry_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_CounterEntry_2eproto = nullptr;

const uint32_t TableStruct_CounterEntry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rk::project::counter::CounterLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rk::project::counter::CounterLogEntry, _impl_.val_),
  PROTOBUF_FIELD_OFFSET(::rk::project::counter::CounterLogEntry, _impl_.commandtype_),
  PROTOBUF_FIELD_OFFSET(::rk::project::counter::CounterLogEntry, _impl_.description_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rk::project::counter::CounterLogEntry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rk::project::counter::_CounterLogEntry_default_instance_._instance,
};

const char descriptor_table_protodef_CounterEntry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022CounterEntry.proto\022\022rk.project.counter"
  "\"\234\001\n\017CounterLogEntry\022\013\n\003val\030\001 \001(\003\022D\n\013com"
  "mandType\030\002 \001(\0162/.rk.project.counter.Coun"
  "terLogEntry.CommandType\022\023\n\013description\030\003"
  " \001(\t\"!\n\013CommandType\022\010\n\004INCR\020\000\022\010\n\004DECR\020\001b"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_CounterEntry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CounterEntry_2eproto = {
    false, false, 207, descriptor_table_protodef_CounterEntry_2eproto,
    "CounterEntry.proto",
    &descriptor_table_CounterEntry_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_CounterEntry_2eproto::offsets,
    file_level_metadata_CounterEntry_2eproto, file_level_enum_descriptors_CounterEntry_2eproto,
    file_level_service_descriptors_CounterEntry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CounterEntry_2eproto_getter() {
  return &descriptor_table_CounterEntry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CounterEntry_2eproto(&descriptor_table_CounterEntry_2eproto);
namespace rk {
namespace project {
namespace counter {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CounterLogEntry_CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CounterEntry_2eproto);
  return file_level_enum_descriptors_CounterEntry_2eproto[0];
}
bool CounterLogEntry_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CounterLogEntry_CommandType CounterLogEntry::INCR;
constexpr CounterLogEntry_CommandType CounterLogEntry::DECR;
constexpr CounterLogEntry_CommandType CounterLogEntry::CommandType_MIN;
constexpr CounterLogEntry_CommandType CounterLogEntry::CommandType_MAX;
constexpr int CounterLogEntry::CommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CounterLogEntry::_Internal {
 public:
};

CounterLogEntry::CounterLogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rk.project.counter.CounterLogEntry)
}
CounterLogEntry::CounterLogEntry(const CounterLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CounterLogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.val_){}
    , decltype(_impl_.commandtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.val_, &from._impl_.val_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.commandtype_) -
    reinterpret_cast<char*>(&_impl_.val_)) + sizeof(_impl_.commandtype_));
  // @@protoc_insertion_point(copy_constructor:rk.project.counter.CounterLogEntry)
}

inline void CounterLogEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.val_){int64_t{0}}
    , decltype(_impl_.commandtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CounterLogEntry::~CounterLogEntry() {
  // @@protoc_insertion_point(destructor:rk.project.counter.CounterLogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CounterLogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
}

void CounterLogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CounterLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:rk.project.counter.CounterLogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.commandtype_) -
      reinterpret_cast<char*>(&_impl_.val_)) + sizeof(_impl_.commandtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CounterLogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rk.project.counter.CounterLogEntry.CommandType commandType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_commandtype(static_cast<::rk::project::counter::CounterLogEntry_CommandType>(val));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rk.project.counter.CounterLogEntry.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CounterLogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rk.project.counter.CounterLogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 val = 1;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_val(), target);
  }

  // .rk.project.counter.CounterLogEntry.CommandType commandType = 2;
  if (this->_internal_commandtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commandtype(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rk.project.counter.CounterLogEntry.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rk.project.counter.CounterLogEntry)
  return target;
}

size_t CounterLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rk.project.counter.CounterLogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int64 val = 1;
  if (this->_internal_val() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_val());
  }

  // .rk.project.counter.CounterLogEntry.CommandType commandType = 2;
  if (this->_internal_commandtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_commandtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CounterLogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CounterLogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CounterLogEntry::GetClassData() const { return &_class_data_; }


void CounterLogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CounterLogEntry*>(&to_msg);
  auto& from = static_cast<const CounterLogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rk.project.counter.CounterLogEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_val() != 0) {
    _this->_internal_set_val(from._internal_val());
  }
  if (from._internal_commandtype() != 0) {
    _this->_internal_set_commandtype(from._internal_commandtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CounterLogEntry::CopyFrom(const CounterLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rk.project.counter.CounterLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterLogEntry::IsInitialized() const {
  return true;
}

void CounterLogEntry::InternalSwap(CounterLogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CounterLogEntry, _impl_.commandtype_)
      + sizeof(CounterLogEntry::_impl_.commandtype_)
      - PROTOBUF_FIELD_OFFSET(CounterLogEntry, _impl_.val_)>(
          reinterpret_cast<char*>(&_impl_.val_),
          reinterpret_cast<char*>(&other->_impl_.val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CounterLogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CounterEntry_2eproto_getter, &descriptor_table_CounterEntry_2eproto_once,
      file_level_metadata_CounterEntry_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace counter
}  // namespace project
}  // namespace rk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rk::project::counter::CounterLogEntry*
Arena::CreateMaybeMessage< ::rk::project::counter::CounterLogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rk::project::counter::CounterLogEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
